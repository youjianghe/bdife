!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(f[n]=t[n]);0==--m&&0===y&&T()}(e,n),t&&t(e,n)};var n,i=!0,r="7180289ee1371a01bfc9",o=1e4,a={},s=[],c=[];function p(e){var t=R[e];if(!t)return _;var i=function(i){return t.hot.active?(R[i]?-1===R[i].parents.indexOf(e)&&R[i].parents.push(e):(s=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),s=[]),_(i)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return _[e]},set:function(t){_[e]=t}}};for(var o in _)Object.prototype.hasOwnProperty.call(_,o)&&"e"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(e){return"ready"===h&&d("prepare"),y++,_.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===h&&(g[e]||b(e),0===y&&0===m&&T())}},i}var l=[],h="idle";function d(e){h=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var u,f,v,m=0,y=0,g={},w={},x={};function N(e){return+e+""===e?+e:e}function E(e){if("idle"!==h)throw new Error("check() is only allowed in idle status");return i=e,d("check"),(t=o,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=_.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=t,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)e();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(i.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return d("idle"),null;w={},g={},x=e.c,v=e.h,d("prepare");var t=new Promise(function(e,t){u={resolve:e,reject:t}});f={};return b(1),"prepare"===h&&0===y&&0===m&&T(),t});var t}function b(e){x[e]?(w[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=_.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function T(){d("ready");var e=u;if(u=null,e)if(i)Promise.resolve().then(function(){return C(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in f)Object.prototype.hasOwnProperty.call(f,n)&&t.push(N(n));e.resolve(t)}}function C(t){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var n,i,o,c,p;function l(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var r=i.pop(),o=r.id,a=r.chain;if((c=R[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var s=0;s<c.parents.length;s++){var p=c.parents[s],l=R[p];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([p]),moduleId:o,parentId:p};-1===t.indexOf(p)&&(l.hot._acceptedDependencies[o]?(n[p]||(n[p]=[]),u(n[p],[o])):(delete n[p],t.push(p),i.push({chain:a.concat([p]),id:p})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var m={},y=[],g={},w=function(){console.warn("[HMR] unexpected require("+b.moduleId+") to disposed module")};for(var E in f)if(Object.prototype.hasOwnProperty.call(f,E)){var b;p=N(E);var T=!1,C=!1,A=!1,S="";switch((b=f[E]?l(p):{type:"disposed",moduleId:E}).chain&&(S="\nUpdate propagation: "+b.chain.join(" -> ")),b.type){case"self-declined":t.onDeclined&&t.onDeclined(b),t.ignoreDeclined||(T=new Error("Aborted because of self decline: "+b.moduleId+S));break;case"declined":t.onDeclined&&t.onDeclined(b),t.ignoreDeclined||(T=new Error("Aborted because of declined dependency: "+b.moduleId+" in "+b.parentId+S));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(b),t.ignoreUnaccepted||(T=new Error("Aborted because "+p+" is not accepted"+S));break;case"accepted":t.onAccepted&&t.onAccepted(b),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(b),A=!0;break;default:throw new Error("Unexception type "+b.type)}if(T)return d("abort"),Promise.reject(T);if(C)for(p in g[p]=f[p],u(y,b.outdatedModules),b.outdatedDependencies)Object.prototype.hasOwnProperty.call(b.outdatedDependencies,p)&&(m[p]||(m[p]=[]),u(m[p],b.outdatedDependencies[p]));A&&(u(y,[b.moduleId]),g[p]=w)}var O,k=[];for(i=0;i<y.length;i++)p=y[i],R[p]&&R[p].hot._selfAccepted&&k.push({module:p,errorHandler:R[p].hot._selfAccepted});d("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var I,P,j=y.slice();j.length>0;)if(p=j.pop(),c=R[p]){var D={},M=c.hot._disposeHandlers;for(o=0;o<M.length;o++)(n=M[o])(D);for(a[p]=D,c.hot.active=!1,delete R[p],delete m[p],o=0;o<c.children.length;o++){var L=R[c.children[o]];L&&((O=L.parents.indexOf(p))>=0&&L.parents.splice(O,1))}}for(p in m)if(Object.prototype.hasOwnProperty.call(m,p)&&(c=R[p]))for(P=m[p],o=0;o<P.length;o++)I=P[o],(O=c.children.indexOf(I))>=0&&c.children.splice(O,1);for(p in d("apply"),r=v,g)Object.prototype.hasOwnProperty.call(g,p)&&(e[p]=g[p]);var U=null;for(p in m)if(Object.prototype.hasOwnProperty.call(m,p)&&(c=R[p])){P=m[p];var B=[];for(i=0;i<P.length;i++)if(I=P[i],n=c.hot._acceptedDependencies[I]){if(-1!==B.indexOf(n))continue;B.push(n)}for(i=0;i<B.length;i++){n=B[i];try{n(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:p,dependencyId:P[i],error:e}),t.ignoreErrored||U||(U=e)}}}for(i=0;i<k.length;i++){var F=k[i];p=F.module,s=[p];try{_(p)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:p,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:p,error:e}),t.ignoreErrored||U||(U=e)}}return U?(d("fail"),Promise.reject(U)):(d("idle"),new Promise(function(e){e(y)}))}var R={};function _(t){if(R[t])return R[t].exports;var i=R[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:E,apply:C,status:function(e){if(!e)return h;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(c=s,s=[],c),children:[]};return e[t].call(i.exports,i,i.exports,p(t)),i.l=!0,i.exports}_.m=e,_.c=R,_.d=function(e,t,n){_.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},_.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},_.t=function(e,t){if(1&t&&(e=_(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(_.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)_.d(n,i,function(t){return e[t]}.bind(null,i));return n},_.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return _.d(t,"a",t),t},_.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},_.p="",_.h=function(){return r},p("./src/index.js")(_.s="./src/index.js")}({"./node_modules/process/browser.js":function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var c,p=[],l=!1,h=-1;function d(){l&&c&&(l=!1,c.length?p=c.concat(p):h=-1,p.length&&u())}function u(){if(!l){var e=s(d);l=!0;for(var t=p.length;t;){for(c=p,p=[];++h<t;)c&&c[h].run();h=-1,t=p.length}c=null,l=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new f(e,t)),1!==p.length||l||s(u)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},"./node_modules/san/dist/san.dev.js":function(e,t,n){(function(t){!function(n){var i=1,r=(new Date).getTime().toString(16).slice(8);function o(){return"_"+r+i++}function a(){}function s(e,t){for(var n in t)if(t.hasOwnProperty(n)){var i=t[n];void 0!==i&&(e[n]=i)}return e}function c(e,t){var n=e.prototype,i=new Function;i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e,s(e.prototype,n)}function p(e,t){if(e&&e.length>0)for(var n=0,i=e.length;n<i&&!1!==t(e[n],n);n++);}function l(e,t){var n=Function.prototype.bind,i=Array.prototype.slice;if(n&&e.bind===n)return n.apply(e,i.call(arguments,1));var r=i.call(arguments,2);return function(){return e.apply(t,r.concat(i.call(arguments)))}}function h(e,t,n,i){e.addEventListener?e.addEventListener(t,n,i):e.attachEvent("on"+t,n)}function d(e){var t={};return p(e.split(","),function(e){t[e]=1}),t}var u=d("svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph");function f(e){return u[e]?document.createElementNS("http://www.w3.org/2000/svg",e):document.createElement(e)}function v(e){e&&e.parentNode&&e.parentNode.removeChild(e)}var m,y=[],g="function"==typeof Promise&&/native code/.test(Promise);function w(e,n){if(n&&(e=l(e,n)),y.push(e),!m)if(m=function(){var e=y.slice(0);y=[],m=null;for(var t=0,n=e.length;t<n;t++)e[t]()},"function"==typeof t)t(m);else if("function"==typeof MessageChannel){var i=new MessageChannel,r=i.port2;i.port1.onmessage=m,r.postMessage(1)}else g?Promise.resolve().then(m):setTimeout(m,0)}var x="undefined"!=typeof navigator&&navigator.userAgent.match(/msie\s*([0-9]+)/i),N=x?x[1]-0:0,E=N&&N<9;function b(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}9===N&&h(document,"selectionchange",function(){var e=document.activeElement;"TEXTAREA"!==e.tagName&&"INPUT"!==e.tagName||b(e,"input")});var T=d("area,base,br,col,embed,hr,img,input,keygen,param,source,track,wbr"),C="<<anonymous>>";function R(e){return e&&1===e.nodeType?"element":Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function _(e){var t=function(){};t.isRequired=a;var n=function(t,n,i,r,o){var a=n[i],s=R(a);if(r=r||C,null!=a)e(n,i,r,o);else if(t)throw new Error("[SAN ERROR] The `"+i+"` is marked as required in `"+r+"`, but its value is "+s)};return(t=l(n,null,!1)).isRequired=l(n,null,!0),t}function A(e){return _(function(t,n,i,r){var o=R(t[n]);if(o!==e)throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+o+" supplied to "+i+", expected "+e+")")})}var S=(_(a),_(a),_(a),_(a),_(a),_(a),_(a));function O(e){this.source=e,this.len=this.source.length,this.index=0}function k(e){return(e=e||{}).textExpr||(e.directives=e.directives||{},e.props=e.props||[],e.events=e.events||[],e.children=e.children||[]),e}function I(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()})}S={any:_(a),array:A("array"),object:A("object"),func:A("function"),string:A("string"),number:A("number"),bool:A("boolean"),symbol:A("symbol"),arrayOf:function(e){return _(function(t,n,i,r){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `arrayOf`, expected `function`");var o=t[n],a=R(o);if("array"!==a)throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+a+" supplied to "+i+", expected array)");for(var s=0,c=o.length;s<c;s++)e(o,s,i,r+"["+s+"]")})},instanceOf:function(e){return _(function(t,n,i,r){var o=t[n];if(!(o instanceof e)){var a=o.constructor&&o.constructor.name?o.constructor.name:C,s=e.name||C;throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+a+" supplied to "+i+", expected instance of "+s+")")}})},shape:function(e){return _(function(t,n,i,r){if("object"!==R(e))throw new Error("[SAN ERROR] Data `"+r+"` of `"+i+"` has invalid DataType notation inside `shape`, expected `object`");var o=t[n],a=R(o);if("object"!==a)throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of type("+a+" supplied to "+i+", expected object)");for(var s in e)if(e.hasOwnProperty(s)){var c=e[s];"function"==typeof c&&c(o,s,i,r+"."+s)}})},oneOf:function(e){return _(function(t,n,i,r){if("array"!==R(e))throw new Error("[SAN ERROR] Data `"+r+"` of `"+i+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],a=0,s=e.length;a<s;a++)if(o===e[a])return;throw new Error("[SAN ERROR] Invalid "+i+" data `"+r+"` of value(`"+o+"` supplied to "+i+", expected one of "+e.join(",")+")")})},oneOfType:function(e){return _(function(t,n,i,r){if("array"!==R(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],a=0,s=e.length;a<s;a++){var c=e[a];if("function"==typeof c)try{return void c(t,n,i,r)}catch(e){}}throw new Error("[SAN ERROR] Invalid "+i+" data `"+n+"` of value(`"+o+"` supplied to "+i+")")})},objectOf:function(e){return _(function(t,n,i,r){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `objectOf`, expected function");var o=t[n],a=R(o);if("object"!==a)throw new Error("[SAN ERROR] Invalid "+i+" data `"+n+"` of type("+a+" supplied to "+i+", expected object)");for(var s in o)o.hasOwnProperty(s)&&e(o,s,i,r+"."+s)})},exact:function(e){return _(function(t,n,i,r,o){if("object"!==R(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+i+"` has invalid DataType notation inside `exact`");var a=t[n],c=R(a);if("object"!==c)throw new Error("[SAN ERROR] Invalid data `"+r+"` of type `"+c+"`(supplied to "+i+", expected `object`)");var p={};for(var l in s(p,e),s(p,a),p)if(p.hasOwnProperty(l)){var h=e[l];if(!h)throw new Error("[SAN ERROR] Invalid data `"+r+"` key `"+l+"` supplied to `"+i+"`. (`"+l+"` is not defined in `DataTypes.exact`)");if(!(l in a))throw new Error("[SAN ERROR] Invalid data `"+r+"` key `"+l+"` supplied to `"+i+"`. (`"+l+"` is marked `required` in `DataTypes.exact`)");h(a,l,i,r+"."+l,o)}})}},O.prototype.currentCode=function(){return this.charCode(this.index)},O.prototype.cut=function(e,t){return this.source.slice(e,t)},O.prototype.go=function(e){this.index+=e},O.prototype.nextCode=function(){return this.go(1),this.currentCode()},O.prototype.charCode=function(e){return this.source.charCodeAt(e)},O.prototype.goUntil=function(e){for(var t;this.index<this.len&&(t=this.currentCode());)switch(t){case 32:case 9:this.index++;break;default:return t===e?(this.index++,1):void 0}},O.prototype.match=function(e,t){e.lastIndex=this.index;var n=e.exec(this.source);if(n&&(!t||this.index===n.index))return this.index=e.lastIndex,n};var P={STRING:1,NUMBER:2,BOOL:3,ACCESSOR:4,INTERP:5,CALL:6,TEXT:7,BINARY:8,UNARY:9,TERTIARY:10,OBJECT:11,ARRAY:12};function j(e){return{type:P.ACCESSOR,paths:e}}function D(e){var t=e.match(/\s*([\$0-9a-z_]+)/gi,1);if(!t)throw new Error("[SAN FATAL] expect an ident: "+e.cut(e.index));return t[1]}function M(e){var t=function e(t){var n=function e(t){var n=function(e){var t=H(e);e.goUntil();var n=e.currentCode();switch(n){case 61:case 33:if(61===e.nextCode())return n+=61,61===e.nextCode()&&(n+=61,e.go(1)),{type:P.BINARY,operator:n,segs:[t,H(e)]};e.go(-1)}return t}(t);t.goUntil();if(38===t.currentCode()){if(38===t.nextCode())return t.go(1),{type:P.BINARY,operator:76,segs:[n,e(t)]};t.go(-1)}return n}(t);t.goUntil();if(124===t.currentCode()){if(124===t.nextCode())return t.go(1),{type:P.BINARY,operator:248,segs:[n,e(t)]};t.go(-1)}return n}(e);if(e.goUntil(),63===e.currentCode()){e.go(1);var n=M(e);if(e.goUntil(),58===e.currentCode())return e.go(1),{type:P.TERTIARY,segs:[t,n,M(e)]}}return t}function L(e){var t=D(e);switch(t){case"true":case"false":return{type:P.BOOL,value:"true"===t}}var n=j([{type:P.STRING,value:t}]);e:for(;;)switch(e.currentCode()){case 46:e.go(1),n.paths.push({type:P.STRING,value:D(e)});break;case 91:e.go(1),n.paths.push(M(e)),e.goUntil(93);break;default:break e}return n}function U(e){switch(e.goUntil(),e.currentCode()){case 33:return e.go(1),{type:P.UNARY,expr:U(e)};case 34:case 39:return function(e){var t,n=e.currentCode(),i=e.index;e:for(;t=e.nextCode();)switch(t){case 92:e.go(1);break;case n:e.go(1);break e}var r=e.cut(i,e.index);return{type:P.STRING,value:new Function("return "+r)()}}(e);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e){var t=e.match(/\s*(-?[0-9]+(\.[0-9]+)?)/g);return{type:P.NUMBER,value:+t[1]}}(e);case 40:return function(e){e.go(1);var t=M(e);return e.goUntil(41),t}(e);case 91:e.go(1);for(var t=[];!e.goUntil(93);){var n={};t.push(n),46===e.currentCode()&&e.match(/\.\.\.\s*/g)&&(n.spread=!0),n.expr=M(e),e.goUntil(44)}return{type:P.ARRAY,items:t};case 123:e.go(1);for(var i=[];!e.goUntil(125);){n={};if(i.push(n),46===e.currentCode()&&e.match(/\.\.\.\s*/g))n.spread=!0,n.expr=M(e);else{var r=e.index;if(n.name=U(e),n.name.type>4)throw new Error("[SAN FATAL] unexpect object name: "+e.cut(r,e.index));e.goUntil(58)?n.expr=M(e):n.expr=n.name,n.name.type===P.ACCESSOR&&(n.name=n.name.paths[0])}e.goUntil(44)}return{type:P.OBJECT,items:i}}return L(e)}function B(e){for(var t=U(e);;){e.goUntil();var n=e.currentCode();switch(n){case 37:case 42:case 47:e.go(1),t={type:P.BINARY,operator:n,segs:[t,U(e)]};continue}break}return t}function F(e){for(var t=B(e);;){e.goUntil();var n=e.currentCode();switch(n){case 43:case 45:e.go(1),t={type:P.BINARY,operator:n,segs:[t,B(e)]};continue}break}return t}function H(e){var t=F(e);e.goUntil();var n=e.currentCode();switch(n){case 60:case 62:return 61===e.nextCode()&&(n+=61,e.go(1)),{type:P.BINARY,operator:n,segs:[t,F(e)]}}return t}function Y(e){if("object"==typeof e&&e.type)return e;var t=M(new O(e));return t.raw=e,t}function $(e,t){e.goUntil();var n=L(e),i=[];if(e.goUntil(40))for(;!e.goUntil(41);)i.push(M(e)),e.goUntil(44);else t&&(i=t);return{type:P.CALL,name:n,args:i}}function G(e,t){var n=$(new O(e),t);return n.raw=e,n}function q(e){for(var t=new O(e),n={type:P.INTERP,expr:M(t),filters:[],raw:e};t.goUntil(124);){var i=$(t);switch(i.name.paths[0].value){case"html":break;case"raw":n.original=1;break;default:n.filters.push(i)}}return n}var X={lt:"<",gt:">",nbsp:" ",quot:'"',emsp:" ",ensp:" ",thinsp:" ",copy:"©",reg:"®",zwnj:"‌",zwj:"‍",amp:"&"};function z(e){return e.replace(/[\^\[\]\$\(\)\{\}\?\*\.\+\\]/g,function(e){return"\\"+e})}function W(e,t){t=t||["{{","}}"];var n,i=new RegExp(z(t[0])+"\\s*([\\s\\S]+?)\\s*"+z(t[1]),"ig"),r=new O(e),o=0,a={type:P.TEXT,segs:[]};function s(e){var t;e&&a.segs.push({type:P.STRING,literal:e,value:(t=e,t.replace(/&#([0-9]+);/g,function(e,t){return String.fromCharCode(+t)}).replace(/&#x([0-9a-f]+);/gi,function(e,t){return String.fromCharCode(parseInt(t,16))}).replace(/&([a-z]+);/gi,function(e,t){return X[t]||e}))})}for(var c=t[1].length;null!=(n=r.match(i));){var p=n[1],l=n[0].length;r.cut(r.index+1-c,r.index+1)===t[1]&&(p+=r.cut(r.index,r.index+1),r.go(1),l++),s(r.cut(o,r.index-l));var h=q(p);a.original=a.original||h.original,a.segs.push(h),o=r.index}return s(r.cut(o)),1===a.segs.length&&a.segs[0].type===P.STRING&&(a.value=a.segs[0].value),a}var J={for:function(e){var t=new O(e),n=t.match(/^\s*([\$0-9a-z_]+)(\s*,\s*([\$0-9a-z_]+))?\s+in\s+/gi);if(n)return{item:Y(n[1]),index:Y(n[3]||"$index"),value:L(t)};throw new Error("[SAN FATAL] for syntax error: "+e)},ref:function(e,t){return{value:W(e,t.delimiters)}},if:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},elif:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},else:function(e){return{value:{}}},bind:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},html:function(e){return{value:Y(e.replace(/(^\{\{|\}\}$)/g,""))}},transition:function(e){return{value:G(e)}}};function V(e){var t=e.expr;if(t.type===P.TEXT)switch(t.segs.length){case 0:e.expr={type:P.BOOL,value:!0};break;case 1:(t=e.expr=t.segs[0]).type===P.INTERP&&0===t.filters.length&&(e.expr=t.expr)}}function K(e,t,n,i){var r,o,a=t.indexOf("-");switch(a>0&&(o=t.slice(0,a),r=t.slice(a+1)),o){case"on":var s,c={name:r,modifier:{}};for(e.events.push(c);(s=n.indexOf(":"))>0;){var p=n.slice(0,s);if(!/^[a-z]+$/i.test(p))break;c.modifier[p]=!0,n=n.slice(s+1)}c.expr=G(n,[j([{type:P.STRING,value:"$event"}])]);break;case"san":case"s":!function(e,t,n,i){"else-if"===t&&(t="elif");var r=J[t];r&&((e.directives[t]=r(n,i)).raw=n)}(e,r,n,i);break;case"prop":Q(e,r,n,i);break;case"var":e.vars||(e.vars=[]),r=I(r),e.vars.push({name:r,expr:Y(n.replace(/(^\{\{|\}\}$)/g,""))});break;default:Q(e,t,n,i)}}function Q(e,t,n,i){var r=n.match(/^\{=\s*(.*?)\s*=\}$/);if(r)e.props.push({name:t,expr:Y(r[1]),x:1,raw:n});else{var o={name:t,expr:W(n,i.delimiters),raw:n};switch(t){case"class":case"style":p(o.expr.segs,function(e){e.type===P.INTERP&&e.filters.push({type:P.CALL,name:j([{type:P.STRING,value:"_"+o.name}]),args:[]})});break;case"checked":"input"===e.tagName&&V(o)}e.props.push(o)}}function Z(e,t){for(var n=["ROOT"],i=1,r=e.length;i<r;i++)n.push(e[i].tagName);return t&&n.push(t),n.join(">")}function ee(e,t){(t=t||{}).trimWhitespace=t.trimWhitespace||"none";var n=k();if("string"!=typeof e)return n;for(var i,r=new O(e=e.replace(/<!--([\s\S]*?)-->/gm,"").replace(/(^\s+|\s+$)/g,"")),o=/<(\/)?([a-z0-9-]+)\s*/gi,a=/([-:0-9a-z\(\)\[\]]+)(\s*=\s*(['"])([^\3]*?)\3)?\s*/gi,s=n,c=[n],p=0,l=0;null!=(i=r.match(o));){var h=i[1],d=i[2].toLowerCase();if(N(e.slice(l,r.index-i[0].length)),h&&62===r.currentCode()){var u=p;if(T[d])throw new Error("[SAN ERROR] "+Z(c,d)+" is a `auto closed` tag, so it cannot be closed with </"+d+">");if(c[u].tagName!==d&&("table"!==d||"tbody"!==c[u].tagName))throw new Error("[SAN ERROR] "+Z(c)+" is closed with "+d);for(;u>0&&c[u].tagName!==d;)u--;u>0&&(s=c[p=u-1]),r.go(1)}else{if(h){if(60===r.currentCode())throw new Error("[SAN ERROR] "+Z(c)+"'s close tag not closed");throw new Error("[SAN ERROR] "+Z(c)+"'s close tag has attributes")}if(!h){for(var f=k({tagName:d}),v=T[d];;){var m=r.currentCode();if(62===m){r.go(1);break}if(47===m&&62===r.charCode(r.index+1)){r.go(2),v=1;break}if(60===m)throw new Error("[SAN ERROR] "+Z(c,d)+" is not closed");var y=r.match(a);if(y){if(61===r.charCode(y.index+y[1].length)&&!y[2])throw new Error("[SAN ERROR] "+Z(c,d)+" attribute `"+y[1]+'` is not wrapped with ""');K(f,y[1],y[2]?y[4]:"",t)}}if(f.directives.else||f.directives.elif)for(var g=s.children.length;g--;){var w=s.children[g];if(!w.textExpr){if(!w.directives.if)throw new Error("[SAN FATEL] else not match if.");w.elses=w.elses||[],w.elses.push(f);break}s.children.splice(g,1)}else{if("tr"===f.tagName&&"table"===s.tagName){var x=k({tagName:"tbody"});s.children.push(x),s=x,c[++p]=x}s.children.push(f)}v||(s=f,c[++p]=f)}}l=r.index}return N(r.cut(l)),n;function N(e){switch(t.trimWhitespace){case"blank":/^\s+$/.test(e)&&(e=null);break;case"all":e=e.replace(/(^\s+|\s+$)/g,"")}e&&s.children.push(k({textExpr:W(e,t.delimiters)}))}}var te={url:encodeURIComponent,_class:function(e){return e instanceof Array?e.join(" "):e},_style:function(e){if("object"==typeof e){var t="";for(var n in e)t+=n+":"+e[n]+";";return t}return e},_sep:function(e,t){return e?t+e:e}};function ne(e,t,n){if(null!=e.value)return e.value;var i=ae.get(t,e);if(null==i){switch(e.type){case P.UNARY:i=!ne(e.expr,t,n);break;case P.BINARY:var r=ne(e.segs[0],t,n),o=ne(e.segs[1],t,n);switch(e.operator){case 37:i=r%o;break;case 43:i=r+o;break;case 45:i=r-o;break;case 42:i=r*o;break;case 47:i=r/o;break;case 60:i=r<o;break;case 62:i=r>o;break;case 76:i=r&&o;break;case 94:i=r!=o;break;case 121:i=r<=o;break;case 122:i=r==o;break;case 123:i=r>=o;break;case 155:i=r!==o;break;case 183:i=r===o;break;case 248:i=r||o}break;case P.TERTIARY:i=ne(e.segs[ne(e.segs[0],t,n)?1:2],t,n);break;case P.ARRAY:i=[];for(var a=0,c=e.items.length;a<c;a++){var p=ne((l=e.items[a]).expr,t,n);l.spread?p&&(i=i.concat(p)):i.push(p)}break;case P.OBJECT:i={};for(a=0,c=e.items.length;a<c;a++){var l;p=ne((l=e.items[a]).expr,t,n);l.spread?p&&s(i,p):i[ne(l.name,t,n)]=p}break;case P.ACCESSOR:i=t.get(e);break;case P.INTERP:if(i=ne(e.expr,t,n),n)for(a=0,c=e.filters.length;a<c;a++){var h=e.filters[a],d=h.name.paths[0].value;n.filters[d]?i=n.filters[d].apply(n,[i].concat(ie(h.args,t,n))):te[d]&&(i=te[d](i,h.args[0]?h.args[0].value:""))}null==i&&(i="");break;case P.TEXT:var u="";for(a=0,c=e.segs.length;a<c;a++){var f=e.segs[a];u+=f.value||ne(f,t,n)}return u}ae.set(t,e,i)}return i}function ie(e,t,n){for(var i=[],r=0;r<e.length;r++)i.push(ne(e[r],t,n));return i}var re={},oe=1,ae={clear:function(){oe||(oe=1,re={})},set:function(e,t,n){t.raw&&(oe=0,(re[e.id]=re[e.id]||{})[t.raw]=n)},get:function(e,t){if(t.raw&&re[e.id])return re[e.id][t.raw]}};function se(e,t,n){for(var i=0,r=t.length;i<r;i++)if(ce(e,t[i],n))return 1;return 0}function ce(e,t,n){switch(t.type){case P.ACCESSOR:for(var i=t.paths,r=i.length,o=e.paths,a=o.length,s=1,c=0;c<r;c++){var l=i[c];if(l.type===P.ACCESSOR&&ce(e,l,n))return 1;s&&c<a&&(l.value||ne(l,n))!=(o[c].value||ne(o[c],n))&&(s=0)}return s&&(s=Math.max(1,a-r+2)),s;case P.UNARY:return ce(e,t.expr,n)?1:0;case P.TEXT:case P.BINARY:case P.TERTIARY:return se(e,t.segs,n);case P.ARRAY:case P.OBJECT:c=0;for(var h=t.items.length;c<h;c++)if(ce(e,t.items[c].expr,n))return 1;return 0;case P.INTERP:var d;return ce(e,t.expr,n)?1:(p(t.filters,function(t){return!(d=se(e,t.args,n))}),d?1:0)}return 0}var pe=1,le=2;function he(e){return this[e]}var de={start:{},compiled:{is:he,compiled:!0},inited:{is:he,compiled:!0,inited:!0},created:{is:he,compiled:!0,inited:!0,created:!0},attached:{is:he,compiled:!0,inited:!0,created:!0,attached:!0},leaving:{is:he,compiled:!0,inited:!0,created:!0,attached:!0,leaving:!0},detached:{is:he,compiled:!0,inited:!0,created:!0,detached:!0},disposed:{is:he,disposed:!0}},ue={TEXT:1,IF:2,FOR:3,ELEM:4,CMPT:5,SLOT:6,TPL:7};function fe(e,t){var n=e.hotspot.props[t];if(null!=n)return e.props[n]}var ve={readonly:"readOnly",cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",rowspan:"rowSpan",valign:"vAlign",usemap:"useMap",frameborder:"frameBorder",for:"htmlFor"},me={prop:function(e,t,n,i){var r=ve[n]||n;t=null==t?"":t,r in e?e[r]=t:e.setAttribute(n,t)},output:function(e,t,n){n.set(t.expr,e.el[t.name],{target:{id:e.id,prop:t.name}})}},ye={prop:function(e,t,n){e.setAttribute(n,t)}},ge={prop:function(e,t,n,i,r){e[ve[n]||n]=!!(r&&""===r.raw||t&&"false"!==t&&"0"!==t)}},we={style:{prop:function(e,t){e.style.cssText=t}},class:{prop:function(e,t){e.className=t}},slot:{prop:a},readonly:ge,disabled:ge,autofocus:ge,required:ge,draggable:ge},xe={checkbox:function(e,t){var n=!1;return p(e,function(e){return!(n=e===t)}),n},radio:function(e,t){return e===t}};var Ne={input:{multiple:ge,checked:{prop:function(e,t,n,i){var r=function(e,t,n){var i=fe(e.aNode,"value"),r=fe(e.aNode,"type");if(i&&r){var o=ne(r.expr,e.scope,e.owner);if(xe[o]){var a=fe(e.aNode,"checked");return a.hintExpr||(a.hintExpr=i.expr),!!xe[o](t,ne(i.expr,e.scope,e.owner))}}}(i,t);ge.prop(e,null!=r?r:t,"checked",i)},output:function(e,t,n){var i=e.el,r=fe(e.aNode,"value"),o=fe(e.aNode,"type")||{};if(r&&o)switch(o.raw){case"checkbox":return void n[i.checked?"push":"remove"](t.expr,i.value);case"radio":return void(i.checked&&n.set(t.expr,i.value,{target:{id:e.id,prop:t.name}}))}me.output(e,t,n)}}},option:{value:{prop:function(e,t,n,i){me.prop(e,t,n,i),function(e,t){var n=e.parent;for(;n&&"select"!==n.tagName;)n=n.parent;if(n){var i,r,o=null;if((i=fe(n.aNode,"value"))&&(r=i.expr)&&(o=n.nodeType===ue.CMPT?ne(r,n.data,n):ne(r,n.scope,n.owner)||""),o===t)return 1}}(i,t)&&(e.selected=!0)}}},select:{value:{prop:function(e,t){e.value=t||""},output:me.output}}};function Ee(e,t){if(u[e])return ye;var n=Ne[e];n||(n=Ne[e]={});var i=n[t];return i||(i=we[t]||me,n[t]=i),i}function be(e,t,n){var i=e.option.target;return i&&i.id===t.id&&(!n||i.prop===n)}function Te(e,t,n){for(var i=e,r=0;null!=i&&r<t.paths.length;r++)i=i[ne(t.paths[r],n)];return i}function Ce(e,t){this.id=o(),this.parent=t,this.raw=e||{},this.listeners=[]}function Re(e,t,n,i){if(0===t.length)return n;var r,o=ne(t[0],i);if(e instanceof Array){var a=+o;return(r=e.slice(0))[isNaN(a)?o:a]=Re(e[a],t.slice(1),n,i),r}if("object"==typeof e){for(var s in r={},e)s!==o&&(r[s]=e[s]);return r[o]=Re(e[o]||{},t.slice(1),n,i),r}return e}function _e(e,t,n,i){var r=Te(this,e.expr.name,n);if("function"==typeof r){var o=new Ce({$event:t?i:i||window.event},n);r.apply(this,ie(e.expr.args,o,this))}}Ce.prototype.checkDataTypes=function(){this.typeChecker&&this.typeChecker(this.raw)},Ce.prototype.setTypeChecker=function(e){this.typeChecker=e},Ce.prototype.listen=function(e){"function"==typeof e&&this.listeners.push(e)},Ce.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)e&&this.listeners[t]!==e||this.listeners.splice(t,1)},Ce.prototype.fire=function(e){if(!(e.option.silent||e.option.silence||e.option.quiet))for(var t=0;t<this.listeners.length;t++)this.listeners[t].call(this,e)},Ce.prototype.get=function(e,t){var n=this.raw;if(!e)return n;var i=(e=Y(e)).paths;if(t=t||this,null==(n=n[i[0].value])&&this.parent)n=this.parent.get(e,t);else for(var r=1,o=i.length;null!=n&&r<o;r++)n=n[i[r].value||ne(i[r],t)];return n},Ce.prototype.set=function(e,t,n){n=n||{};var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data set: "+i);(this.get(e)!==t||n.force)&&(ae.clear(),this.raw=Re(this.raw,e.paths,t,this),this.fire({type:pe,expr:e,value:t,option:n}),this.checkDataTypes())},Ce.prototype.merge=function(e,t,n){n=n||{};var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data merge: "+i);if("object"!=typeof this.get(e))throw new Error("[SAN ERROR] Merge Expects a Target of Type 'object'; got "+typeof oldValue);if("object"!=typeof t)throw new Error("[SAN ERROR] Merge Expects a Source of Type 'object'; got "+typeof t);for(var r in t)this.set(j(e.paths.concat([{type:P.STRING,value:r}])),t[r],n)},Ce.prototype.apply=function(e,t,n){var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data apply: "+i);var r=this.get(e);if("function"!=typeof t)throw new Error("[SAN ERROR] Invalid Argument's Type in Data apply: Expected Function but got "+typeof t);this.set(e,t(r),n)},Ce.prototype.splice=function(e,t,n){n=n||{};var i=e;if((e=Y(e)).type!==P.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data splice: "+i);var r=this.get(e),o=[];if(r instanceof Array){var a=t[0],s=r.length;a>s?a=s:a<0&&(a=s+a)<0&&(a=0);var c=r.slice(0);o=c.splice.apply(c,t),ae.clear(),this.raw=Re(this.raw,e.paths,c,this),this.fire({expr:e,type:le,index:a,deleteCount:o.length,value:o,insertions:t.slice(2),option:n})}return this.checkDataTypes(),o},Ce.prototype.push=function(e,t,n){var i=this.get(e);if(i instanceof Array)return this.splice(e,[i.length,0,t],n),i.length+1},Ce.prototype.pop=function(e,t){var n=this.get(e);if(n instanceof Array){var i=n.length;if(i)return this.splice(e,[i-1,1],t)[0]}},Ce.prototype.shift=function(e,t){return this.splice(e,[0,1],t)[0]},Ce.prototype.unshift=function(e,t,n){var i=this.get(e);if(i instanceof Array)return this.splice(e,[0,0,t],n),i.length+1},Ce.prototype.removeAt=function(e,t,n){this.splice(e,[t,1],n)},Ce.prototype.remove=function(e,t,n){var i=this.get(e);if(i instanceof Array)for(var r=i.length;r--;)if(i[r]===t){this.splice(e,[r,1],n);break}};var Ae="undefined"!=typeof window;function Se(e,t,n){t&&(n?t.insertBefore(e,n):t.appendChild(e))}function Oe(e){if("undefined"!=typeof window&&"undefined"!=typeof navigator&&window.document&&function(e){return/^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(e.tagName)}(e)){var t='[SAN WARNING] set html for element "'+e.tagName+'" may cause an error in old IE';if("object"!=typeof console||!console.warn)throw new Error(t);console.warn(t)}}function ke(e){for(var t=[],n=e;n;){switch(n.nodeType){case ue.ELEM:t.unshift(n.tagName);break;case ue.IF:t.unshift("if");break;case ue.FOR:t.unshift("for["+n.anode.directives.for.raw+"]");break;case ue.SLOT:t.unshift("slot["+(n.name||"default")+"]");break;case ue.TPL:t.unshift("template");break;case ue.CMPT:t.unshift("component["+(n.subTag||"root")+"]");break;case ue.TEXT:t.unshift("text")}n=n.parent}return t}function Ie(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,r){var o=r.current;if(o)switch(o.nodeType){case 8:if("s-text"===o.data)for(this.sel=o,o.data=this.id,r.goNext();;){if(!(o=r.current))throw new Error("[SAN REVERSE ERROR] Text end flag not found. \nPaths: "+ke(this).join(" > "));if(s="text",8===(a=o).nodeType&&a.data==="/s-"+s){this.el=o,r.goNext(),o.data=this.id;break}r.goNext()}break;case 3:r.goNext(),this.aNode.textExpr.original||(this.el=o)}else this.el=document.createTextNode(""),Se(this.el,r.target,r.current)}var a,s}Ie.prototype.nodeType=ue.TEXT,Ie.prototype.attach=function(e,t){if(this.content=ne(this.aNode.textExpr,this.scope,this.owner),this.aNode.textExpr.original){this.sel=document.createComment(this.id),Se(this.sel,e,t),this.el=document.createComment(this.id),Se(this.el,e,t);var n=document.createElement("script");e.insertBefore(n,this.el),n.insertAdjacentHTML("beforebegin",this.content),e.removeChild(n)}else this.el=document.createTextNode(this.content),Se(this.el,e,t)},Ie.prototype.dispose=function(){this._prev=null,this.el=null,this.sel=null};var Pe=Ae&&("string"==typeof document.createTextNode("").textContent?"textContent":"data");function je(e,t){var n=[];for(var i in e)n.push(i);for(var i in t)!e[i]&&n.push(i);return n}function De(e,t){for(var n=0;n<e.length;n++){var i=e[n];if(!i.overview){var r=i.expr.paths;i.overview=r[0].value,r.length>1&&(i.extOverview=r[0].value+"."+r[1].value,i.wildOverview=r[0].value+".*")}if(t[i.overview]||i.wildOverview&&t[i.wildOverview]||i.extOverview&&t[i.extOverview])return!0}}function Me(e){this.raw=[],this.index=0,this.target=e;for(var t,n=e.firstChild;n;){switch(t=n.nextSibling,n.nodeType){case 3:/^\s*$/.test(n.data||n.textContent)?v(n):this.raw.push(n);break;case 1:case 8:this.raw.push(n)}n=t}this.current=this.raw[this.index],this.next=this.raw[this.index+1]}function Le(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.lifeCycle=de.start,this.children=[],this._elFns=[],this.parentComponent=i.nodeType===ue.CMPT?i:i.parentComponent,this.id=o(),Et(this),Be(this,e.directives.bind),this._toPhase("inited"),r){var a=r.current;if(!a)throw new Error("[SAN REVERSE ERROR] Element not found. \nPaths: "+ke(this).join(" > "));if(1!==a.nodeType)throw new Error("[SAN REVERSE ERROR] Element type not match, expect 1 but "+a.nodeType+".\nPaths: "+ke(this).join(" > "));if(a.tagName.toLowerCase()!==this.tagName)throw new Error("[SAN REVERSE ERROR] Element tagName not match, expect "+this.tagName+" but meat "+a.tagName.toLowerCase()+".\nPaths: "+ke(this).join(" > "));this.el=a,r.goNext(),it(this),this._attached()}}function Ue(e){e.el=null,e.sel=null,e.owner=null,e.scope=null,e.aNode=null,e.parent=null,e.parentComponent=null,e.children=null,e._toPhase&&e._toPhase("disposed"),e._ondisposed&&e._ondisposed()}function Be(e,t){if(t&&e.scope)return e._sbindData=ne(t.value,e.scope,e.owner),!0}function Fe(e,t,n,i){if(t)for(var r=n.length;r--;)if(ce(n[r].expr,t.value,e.scope)){for(var o=ne(t.value,e.scope,e.owner),a=je(o,e._sbindData),s=0,c=a.length;s<c;s++){var p=a[s],l=o[p];l!==e._sbindData[p]&&i(p,l)}e._sbindData=o;break}}function He(e,t,n,i){var r=n.nodeType===ue.CMPT,o=r?n:n.childOwner||n.owner;if(i=i||(r?n.data:n.childScope||n.scope),e.textExpr)return new Ie(e,o,i,n,t);if(e.directives.if)return new tt(e,o,i,n,t);if(e.directives.for)return new Ze(e,o,i,n,t);switch(e.tagName){case"slot":return new ze(e,o,i,n,t);case"template":return new nt(e,o,i,n,t);default:var a=o.getComponentType?o.getComponentType(e):o.components[e.tagName];if(a)return new a({aNode:e,owner:o,scope:i,parent:n,subTag:e.tagName,reverseWalker:t})}return new Le(e,o,i,n,t)}function Ye(e,t,n){for(var i=e.children,r=i&&i.length;r--;)i[r].dispose(t,n)}function $e(e,t){for(var n=0,i=e.children.length;n<i;n++)e.children[n]._update(t)}function Ge(e){this.lifeCycle=de[e]||this.lifeCycle}function qe(e,t,n){var i=t.nodeType===ue.CMPT,r=i?t:t.childOwner||t.owner;if(n=n||(i?t.data:t.childScope||t.scope),e.textExpr)return new Ie(e,r,n,t);if(e.directives.if)return new tt(e,r,n,t);if(e.directives.for)return new Ze(e,r,n,t);switch(e.tagName){case"slot":return new ze(e,r,n,t);case"template":return new nt(e,r,n,t);default:var o=r.getComponentType?r.getComponentType(e):r.components[e.tagName];if(o)return new o({aNode:e,owner:r,scope:n,parent:t,subTag:e.tagName})}return new Le(e,r,n,t)}function Xe(e,t){this.sel=document.createComment(this.id),Se(this.sel,e,t),function(e,t,n){t=t||e.el;for(var i=e.aNode.children,r=0;r<i.length;r++){var o=qe(i[r],e);e.children.push(o),o.attach(t,n)}}(this,e,t),this.el=document.createComment(this.id),Se(this.el,e,t),this._toPhase("attached")}function ze(e,t,n,i,r){var a=k();this.aNode=a,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===ue.CMPT?i:i.parentComponent,this.id=o(),this.lifeCycle=de.start,this.children=[],this.nameBind=fe(e,"name"),this.nameBind&&(this.isNamed=!0,this.name=ne(this.nameBind.expr,this.scope,this.owner));var c,l=t.givenSlots;l&&(c=this.isNamed?l.named[this.name]:l.noname),c&&(this.isInserted=!0),a.children=c||e.children.slice(0);var h,d=this;a.vars=e.vars,a.directives=e.directives,Be(this,e.directives.bind)&&(h=s({},d._sbindData)),a.vars&&(h=h||{},p(a.vars,function(e){h[e.name]=ne(e.expr,n,t)})),this.isInserted&&(this.childOwner=t.owner,this.childScope=t.scope),h&&(this.isScoped=!0,this.childScope=new Ce(h,this.childScope||this.scope)),t.slotChildren.push(this),r&&(this.sel=document.createComment(this.id),Se(this.sel,r.target,r.current),p(this.aNode.children,function(e){d.children.push(He(e,r,d))}),this.el=document.createComment(this.id),Se(this.el,r.target,r.current),this._toPhase("attached"))}function We(e,t){var n={};for(var i in t=t||{},e)t[i]||(n[i]=e[i]);return n}function Je(e){Ye(this,e,1),e||v(this.el),Ue(this)}function Ve(){this.el=this.el||document.createComment(this.id)}function Ke(e,t,n){this.id=o(),this.parent=e.scope,this.raw={},this.listeners=[],this.directive=e.aNode.directives.for,this.raw[this.directive.item.raw]=t,this.raw[this.directive.index.raw]=n}function Qe(e,t,n){var i=new Ke(e,t,n);return qe(e.itemANode,e,i)}function Ze(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===ue.CMPT?i:i.parentComponent,this.id=o(),this.children=[],this.itemANode=k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:We(e.directives,{for:1})}),this.param=e.directives.for,r){var a=this;p(ne(this.param.value,this.scope,this.owner),function(e,t){var n=new Ke(a,e,t),i=He(a.itemANode,r,a,n);a.children.push(i)}),this._create(),Se(this.el,r.target,r.current)}}function et(e){return k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:We(e.directives,{if:1,else:1,elif:1})})}function tt(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===ue.CMPT?i:i.parentComponent,this.id=o(),this.children=[],this.cond=this.aNode.directives.if.value,r){if(ne(this.cond,this.scope,this.owner))this.elseIndex=-1,this.children[0]=He(et(e),r,this);else{var a=this;p(e.elses,function(e,t){var n=e.directives.elif;if(!n||n&&ne(n.value,a.scope,a.owner))return a.elseIndex=t,a.children[0]=He(et(e),r,a),!1})}this._create(),Se(this.el,r.target,r.current)}}function nt(e,t,n,i,r){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=i,this.parentComponent=i.nodeType===ue.CMPT?i:i.parentComponent,this.id=o(),this.lifeCycle=de.start,this.children=[],r){this.sel=document.createComment(this.id),Se(this.sel,r.target,r.current);var a=this;p(this.aNode.children,function(e){a.children.push(He(e,r,a))}),this.el=document.createComment(this.id),Se(this.el,r.target,r.current),this._toPhase("attached")}}function it(e){if(!e.aNode.directives.html){var t=new Me(e.el);p(e.aNode.children,function(n){e.children.push(He(n,t,e))})}}function rt(e,t,n){var i=n.name;Ee(e.tagName,i).prop(e.el,t,i,e,n)}Ie.prototype._update=function(e){if(!this.aNode.textExpr.value)for(var t=e?e.length:0;t--;)if(ce(e[t].expr,this.aNode.textExpr,this.scope)){var n=ne(this.aNode.textExpr,this.scope,this.owner);if(n!==this.content)if(this.content=n,this.aNode.textExpr.original){for(var i=this.sel.nextSibling,r=this.el.parentNode;i!==this.el;){var o=i;i=i.nextSibling,v(o)}Oe(r);var a=document.createElement("script");r.insertBefore(a,this.el),a.insertAdjacentHTML("beforebegin",n),r.removeChild(a)}else this.el[Pe]=n;return}},Me.prototype.goNext=function(){this.current=this.raw[++this.index],this.next=this.raw[this.index+1]},Le.prototype.nodeType=ue.ELEM,Le.prototype.attach=pt,Le.prototype.detach=dt,Le.prototype.dispose=ut,Le.prototype._create=st,Le.prototype._toPhase=Ge,Le.prototype._onEl=ft,Le.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||Nt(this,this.disposeNoDetach,this.disposeNoTransition):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},Le.prototype._update=function(e){if(De(e,this.aNode.hotspot.data)){var t=this;Fe(this,this.aNode.directives.bind,e,function(e,n){e in t.aNode.hotspot.props||Ee(t.tagName,e).prop(t.el,n,e,t)});for(var n=this.aNode.hotspot.dynamicProps,i=0,r=n.length;i<r;i++)for(var o=n[i],a=0,s=e.length;a<s;a++){var c=e[a];if(!be(c,this,o.name)&&(ce(c.expr,o.expr,this.scope)||o.hintExpr&&ce(c.expr,o.hintExpr,this.scope))){rt(this,ne(o.expr,this.scope,this.owner),o);break}}var p=this.aNode.directives.html;if(p){for(var l=e.length;l--;)if(ce(e[l].expr,p.value,this.scope))return Oe(this.el),this.el.innerHTML=ne(p.value,this.scope,this.owner),!1}else $e(this,e)}},Le.prototype._attached=xt,ze.prototype.nodeType=ue.SLOT,ze.prototype.dispose=function(e,t){this.childOwner=null,this.childScope=null,Ye(this,e,t),Ue(this)},ze.prototype.attach=Xe,ze.prototype._toPhase=Ge,ze.prototype._update=function(e,t){var n=this;if(this.nameBind&&ne(this.nameBind.expr,this.scope,this.owner)!==n.name)return this.owner._notifyNeedReload(),!1;if(t)this.isInserted&&$e(this,e);else if(this.isScoped){var i={};p(this.aNode.vars,function(e){i[e.name]=1,n.childScope.set(e.name,ne(e.expr,n.scope,n.owner))});var r=[];Fe(this,this.aNode.directives.bind,e,function(e,t){i[e]||(n.childScope.set(e,t),r.push({type:pe,expr:j([{type:P.STRING,value:e}]),value:t,option:{}}))}),p(e,function(e){n.isInserted||r.push(e),p(n.aNode.vars,function(t){var i=t.name,o=ce(e.expr,t.expr,n.scope);o<1||(e.type!==le?r.push({type:pe,expr:j([{type:P.STRING,value:i}]),value:n.childScope.get(i),option:e.option}):2===o&&r.push({expr:j([{type:P.STRING,value:i}]),type:le,index:e.index,deleteCount:e.deleteCount,value:e.value,insertions:e.insertions,option:e.option}))})}),$e(this,r)}else this.isInserted||$e(this,e)},Ke.prototype.exprResolve=function(e){var t=this.directive,n=this;function i(e){return e.type===P.ACCESSOR&&e.paths[0].value===t.item.paths[0].value?j(t.value.paths.concat({type:P.NUMBER,value:n.get(t.index)},e.paths.slice(1))):e}var r=[];return p((e=i(e)).paths,function(e){r.push(e.type===P.ACCESSOR&&e.paths[0].value===t.index.paths[0].value?{type:P.NUMBER,value:n.get(t.index)}:i(e))}),j(r)},c(Ke,Ce),p(["set","remove","unshift","shift","push","pop","splice"],function(e){Ke.prototype["_"+e]=Ce.prototype[e],Ke.prototype[e]=function(t){t=this.exprResolve(Y(t)),ae.clear(),this.parent[e].apply(this.parent,[t].concat(Array.prototype.slice.call(arguments,1)))}}),Ze.prototype.nodeType=ue.FOR,Ze.prototype._create=Ve,Ze.prototype.dispose=Je,Ze.prototype.attach=function(e,t){this._create(),Se(this.el,e,t);for(var n=this.el||e.firstChild,i=ne(this.param.value,this.scope,this.owner),r=i&&i.length||0,o=0;o<r;o++){var a=Qe(this,i[o],o);this.children.push(a),a.attach(e,n)}},Ze.prototype.detach=function(){this.lifeCycle.attached&&(Ye(this),this.children=[],v(this.el),this.lifeCycle=de.detached)},Ze.prototype._update=function(e){var t=this,n=this.aNode.directives.transition,i=this.children.length,r=new Array(i);function o(e){for(var t=0,n=r.length;t<n;t++)(r[t]=r[t]||[]).push(e)}for(var a,s=[],c=this.el.parentNode,p=c.firstChild,l=c.lastChild,h=i>0&&p===this.children[0].el&&(l===this.el||l===this.children[i-1].el)||0===i&&p===this.el&&l===this.el,d=ne(this.param.value,this.scope,this.owner),u=d&&d.length||0,f=0,v=e.length;f<v;f++){var m=e[f],y=ce(m.expr,this.param.value,this.scope);if(y){if(y>2){var g=m.expr.paths,w=this.param.value.paths.length,x=+ne(g[w],this.scope,this.owner);isNaN(x)?o(m):(m={type:m.type,expr:j(this.param.item.paths.concat(g.slice(w+1))),value:m.value,index:m.index,deleteCount:m.deleteCount,insertions:m.insertions,option:m.option},(r[x]=r[x]||[]).push(m),this.children[x]&&(m.type===le?this.children[x].scope._splice(m.expr,[].concat(m.index,m.deleteCount,m.insertions),{silent:1}):this.children[x].scope._set(m.expr,m.value,{silent:1})))}else if(m.type!==le){i>u&&(s=s.concat(this.children.slice(u)),r=r.slice(0,u),this.children=this.children.slice(0,u));for(var N=0;N<u;N++)(r[N]=r[N]||[]).push({type:pe,option:m.option,expr:j(this.param.item.paths.slice(0)),value:d[N]}),y<2&&r[N].push(m),this.children[N]?this.children[N].scope._set(this.param.item,d[N],{silent:1}):this.children[N]=0;a=1}else if(2===y&&m.type===le&&!a){var E=m.index,b=m.deleteCount,T=m.insertions.length,C=T-b;if(C){var R={type:pe,option:m.option,expr:this.param.index};for(N=E+b;N<this.children.length;N++)(r[N]=r[N]||[]).push(R),this.children[N]&&this.children[N].scope._set(R.expr,N-b+T,{silent:1})}for(var _=b;_--;){if(_<T)(r[N=E+_]=r[N]||[]).push({type:pe,option:m.option,expr:j(this.param.item.paths.slice(0)),value:m.insertions[_]}),this.children[N]&&this.children[N].scope._set(this.param.item,m.insertions[_],{silent:1})}if(C<0)s=s.concat(this.children.splice(E+T,-C)),r.splice(E+T,-C);else if(C>0){var A=[E+b,0].concat(new Array(C));this.children.splice.apply(this.children,A),r.splice.apply(r,A)}}}else o(m)}var S=this.children.length;if(S!==i){var O={type:pe,option:{},expr:j(this.param.value.paths.concat({type:P.STRING,value:"length"}))};De([O],this.aNode.hotspot.data)&&o(O)}this._doCreateAndUpdate=U;var k=!n&&h&&0===S,I=0;for(N=0;N<s.length;N++){var D=s[N];D?(D._ondisposed=L,D.dispose(k,k)):L()}if(k){var M=c.cloneNode(!1);c.parentNode.replaceChild(M,c),this.el=document.createComment(this.id),M.appendChild(this.el)}function L(){++I===s.length&&U===t._doCreateAndUpdate&&U()}function U(){if(t._doCreateAndUpdate=null,!k){var e=t.el;if(0===i&&h)for(var n=0;n<S;n++)t.children[n]=Qe(t,d[n],n),t.children[n].attach(c,e);else{var o=-1;for(n=0;n<S;n++){var a=t.children[n];if(a)r[n]&&a._update(r[n]);else{if(o<n)for(o=n+1,e=null;o<S;){var s=t.children[o];if(s){e=s.sel||s.el;break}o++}t.children[n]=Qe(t,d[n],n),t.children[n].attach(c,e||t.el)}}}}}0===s.length&&U()},tt.prototype.nodeType=ue.IF,tt.prototype._create=Ve,tt.prototype.dispose=Je,tt.prototype.attach=function(e,t){var n,i,r=this;ne(this.cond,this.scope,this.owner)?(i=qe(et(r.aNode),r),n=-1):p(r.aNode.elses,function(e,t){var o=e.directives.elif;if(!o||o&&ne(o.value,r.scope,r.owner))return i=qe(et(e),r),n=t,!1}),i&&(r.children[0]=i,i.attach(e,t),r.elseIndex=n),this._create(),Se(this.el,e,t)},tt.prototype._update=function(e){var t,n=this,i=n.aNode;if(ne(this.cond,this.scope,this.owner)?t=-1:p(n.aNode.elses,function(e,r){var o=e.directives.elif;if(o&&ne(o.value,n.scope,n.owner)||!o)return t=r,i=e,!1}),t===n.elseIndex)$e(n,e);else{var r=n.children[0];n.children=[],r?(r._ondisposed=o,r.dispose()):o(),n.elseIndex=t}function o(){if(void 0!==t){var e=qe(et(i),n);e.attach(n.el.parentNode,n.el),n.children[0]=e}}},nt.prototype.nodeType=ue.TPL,nt.prototype.attach=Xe,nt.prototype.dispose=function(e,t){Ye(this,e,t),Ue(this)},nt.prototype._toPhase=Ge,nt.prototype._update=function(e){$e(this,e)};var ot,at={class:1,style:1,id:1};function st(){if(!this.lifeCycle.created){var e=this.nodeType===ue.CMPT,t=this.aNode.hotspot.sourceNode,n=this.aNode.props;for(var i in t?(this.el=t.cloneNode(),n=this.aNode.hotspot.dynamicProps):this.el=f(this.tagName),this._sbindData)Ee(this.tagName,i).prop(this.el,this._sbindData[i],i,this);for(var r=0,o=n.length;r<o;r++){var a=n[r],s=e?ne(a.expr,this.data,this):ne(a.expr,this.scope,this.owner);!s&&at[a.name]||rt(this,s,a)}this._toPhase("created")}}function ct(e,t,n){if(e._create(),Se(e.el,t,n),!e._contentReady){var i=e.aNode.directives.html;if(i)e.el.innerHTML=ne(i.value,e.scope,e.owner);else for(var r=e.aNode.children,o=0;o<r.length;o++){var a=qe(r[o],e);e.children.push(a),a.attach(e.el)}e._contentReady=1}}function pt(e,t){this.lifeCycle.attached||(ct(this,e,t),this._attached())}function lt(e){var t,n=e.aNode.directives.transition,i=e.owner;if(e.nodeType===ue.CMPT){var r=e.givenANode&&e.givenANode.directives.transition;r?n=r:i=e}return n&&i&&"function"==typeof(t=Te(i,n.value.name))&&(t=t.apply(i,ie(n.value.args,e.scope,i))),t||e.transition}function ht(e){if(!e.lifeCycle.leaving)if(e.disposeNoTransition)e._doneLeave();else{var t=lt(e);t&&t.leave?(e._toPhase("leaving"),t.leave(e.el,function(){e._doneLeave()})):e._doneLeave()}}function dt(){ht(this)}function ut(e,t){this.leaveDispose=1,this.disposeNoDetach=e,this.disposeNoTransition=t,ht(this)}function ft(e,t,n){"function"==typeof t&&(n=!!n,this._elFns.push([e,t,n]),h(this.el,e,t,n))}function vt(e,t){var n=!0,i=t;if(p(e.expr.name.paths,function(e){return!!e.value&&(i=i[e.value],n=!!i)}),!n){var r=[];p(e.expr.name.paths,function(e){r.push(e.value)});var o="[SAN WARNING] "+e.name+' listen fail,"'+r.join(".")+'" not exist';if("object"!=typeof console||!console.warn)throw new Error(o);console.warn(o)}}function mt(){this.composing&&(this.composing=0,b(this,"input"))}function yt(){this.composing=1}function gt(e,t){Ee(this.tagName,e.name).output(this,e,t)}function wt(e,t,n){var i=l(gt,e,t,n);return function(e){this.composing||i(e)}}function xt(){this._toPhase("created");for(var e=this.nodeType===ue.CMPT,t=e?this.data:this.scope,n=this.aNode.hotspot.xProps,i=0,r=n.length;i<r;i++){var o=n[i];switch(o.name){case"value":switch(this.tagName){case"input":case"textarea":Ae&&window.CompositionEvent&&(this._onEl("change",mt),this._onEl("compositionstart",yt),this._onEl("compositionend",mt)),this._onEl("oninput"in this.el?"input":"propertychange",wt(this,o,t));break;case"select":this._onEl("change",l(gt,this,o,t))}break;case"checked":switch(this.tagName){case"input":switch(this.el.type){case"checkbox":case"radio":this._onEl("click",l(gt,this,o,t))}}}}var s=e?this.aNode.events.concat(this.nativeEvents):this.aNode.events;for(i=0,r=s.length;i<r;i++){var c=s[i],p=e?this:this.owner;c.modifier.native&&(p=p.owner,t=this.scope||p.data),vt(c,p),this._onEl(c.name,l(_e,p,c,0,t),c.modifier.capture)}if(this._toPhase("attached"),this._isInitFromEl)this._isInitFromEl=!1;else{var h=lt(this);h&&h.enter&&h.enter(this.el,a)}}function Nt(e){Ye(e,1,1);for(var t,n,i,r,o=e._elFns.length;o--;){var a=e._elFns[o];t=e.el,n=a[0],i=a[1],r=a[2],t.addEventListener?t.removeEventListener(n,i,r):t.detachEvent("on"+n,i)}e._elFns=null,e.disposeNoDetach&&e.parent||v(e.el),e._toPhase&&e._toPhase("detached"),Ue(e)}function Et(e){e.tagName=e.tagName||e.aNode.tagName||"div",E&&e.tagName.indexOf("-")>0&&(e.tagName="div")}function bt(e,t){Ae&&ot&&ot.debug&&window.__san_devtool__&&window.__san_devtool__.emit(e,t)}function Tt(e){e=e||{},this.lifeCycle=de.start,this.children=[],this._elFns=[],this.listeners={},this.slotChildren=[];var t=this.constructor;this.filters=this.filters||t.filters||{},this.computed=this.computed||t.computed||{},this.messages=this.messages||t.messages||{},e.transition&&(this.transition=e.transition),this.subTag=e.subTag,Rt(t),function(e){var t=[];function n(e,n){var i=t.length;p(t,function(t,r){n&&r===i-1||p(e,function(e){t.hotspot.data[e]=1})})}!function e(i){if(!i.hotspot){if(t.push(i),i.textExpr)i.hotspot={data:{}},n(_t(i.textExpr));else{var r;for(var o in Ae&&i.tagName&&!/^(template|slot|select|input|option)$/i.test(i.tagName)&&(r=f(i.tagName)),i.hotspot={data:{},dynamicProps:[],xProps:[],props:{},sourceNode:r},p(i.vars,function(e){n(_t(e.expr))}),p(i.props,function(e){n(_t(e.expr))}),i.directives){var a=i.directives[o];n(_t(a.value),!/^(html|bind)$/.test(o))}if(p(i.elses,function(t){e(t)}),p(i.children,function(t){e(t)}),p(i.props,function(e,t){i.hotspot.props[e.name]=t,"id"===e.name?(e.id=!0,i.hotspot.idProp=e,i.hotspot.dynamicProps.push(e)):null!=e.expr.value?r&&Ee(i.tagName,e.name).prop(r,e.expr.value,e.name,i):(e.x&&i.hotspot.xProps.push(e),i.hotspot.dynamicProps.push(e))}),"option"===i.tagName&&!fe(i,"value")&&i.children[0]){var s={name:"value",expr:i.children[0].textExpr};i.props.push(s),i.hotspot.dynamicProps.push(s),i.hotspot.props.value=i.props.length-1}}t.pop()}}(e.prototype.aNode)}(t);var n=this,i=t.prototype.aNode;n.givenANode=e.aNode,n.givenNamedSlotBinds=[],n.givenSlots={named:{}},this.owner=e.owner,this.scope=e.scope,this.el=e.el;var r,a,c=e.parent;if(c&&(this.parent=c,this.parentComponent=c.nodeType===ue.CMPT?c:c&&c.parentComponent),this.id=o(),this.el){var h=this.el.firstChild;if(3===h.nodeType&&(h=h.nextSibling),h&&8===h.nodeType){var d=h.data.match(/^\s*s-data:([\s\S]+)?$/);if(d){var u=d[1];e.data=new Function("return "+u.replace(/^[\s\n]*/,""))(),h.previousSibling&&v(h.previousSibling),v(h)}}}this.nativeEvents=[],this.givenANode&&(this._createGivenSlots(),p(this.givenANode.events,function(t){t.modifier.native?n.nativeEvents.push(t):(vt(t,e.owner),n.on(t.name,l(_e,e.owner,t,1,e.scope),t))}),this.tagName=i.tagName||n.givenANode.tagName,this.binds=(r=this.givenANode.props,a=[],p(r,function(e){a.push({name:I(e.name),expr:e.expr,x:e.x,raw:e.raw})}),a),Be(this,this.givenANode.directives.bind)),this._toPhase("compiled"),this.data=new Ce(s("function"==typeof this.initData&&this.initData()||{},e.data||this._sbindData)),Et(this),p(this.binds,function(e){if(V(e),n.scope){var t=ne(e.expr,n.scope,n.owner);void 0!==t&&n.data.set(e.name,t)}});var m=this.dataTypes||t.dataTypes;if(m){var y=function(e,t){return function(n){for(var i in e)if(e.hasOwnProperty(i)){var r=e[i];if("function"!=typeof r)throw new Error("[SAN ERROR] "+t+":"+i+" is invalid; it must be a function, usually from san.DataTypes");r(n,i,t,i)}}}(m,this.subTag||this.name||t.name);this.data.setTypeChecker(y),this.data.checkDataTypes()}for(var g in this.computedDeps={},this.computed)this.computedDeps[g]||this._calcComputed(g);this.dataChanger||(this.dataChanger=l(this._dataChanger,this),this.data.listen(this.dataChanger)),this._toPhase("inited"),this.el&&(it(this),this._attached());var w=e.reverseWalker;if(w){var x=w.current;x&&1===x.nodeType&&(this.el=x,w.goNext()),it(this),this._attached()}}function Ct(e){if("function"==typeof e)return e;if("object"!=typeof e)throw new Error("[SAN FATAL] param must be a plain object.");function t(e){Tt.call(this,e)}return t.prototype=e,c(t,Tt),t}function Rt(e){var t=e.prototype;if(!t.hasOwnProperty("_cmptReady")){t.components=e.components||t.components||{};var n=t.components;for(var i in n){var r=n[i];"object"==typeof r?n[i]=Ct(r):"self"===r&&(n[i]=e)}t._cmptReady=1}if(!t.hasOwnProperty("aNode")){t.aNode=k();var o=e.template||t.template;if(o){var a=ee(o,{trimWhitespace:t.trimWhitespace||e.trimWhitespace,delimiters:t.delimiters||e.delimiters}),s=a.children[0];if(1!==a.children.length||s.textExpr)throw new Error("[SAN FATAL] template must have a root element.");t.aNode=s,"template"===s.tagName&&(s.tagName=null);for(var c={class:{name:"class",expr:W('{{class | _class | _sep(" ")}}')},style:{name:"style",expr:W('{{style | _style | _sep(";")}}')},id:{name:"id",expr:W("{{id}}")}},p=s.props.length;p--;){var l=s.props[p],h=c[l.name];h&&(s.props.splice(p,1),c[l.name]=l,"id"!==l.name&&(l.expr.segs.push(h.expr.segs[0]),l.expr.value=null))}s.props.push(c.class,c.style,c.id)}}}function _t(e){var t=[];function n(e){p(e,function(e){t=t.concat(_t(e))})}switch(e.type){case P.ACCESSOR:var i=e.paths;t.push(i[0].value),i.length>1&&t.push(i[0].value+"."+(i[1].value||"*")),n(i.slice(1));break;case P.UNARY:return _t(e.expr);case P.TEXT:case P.BINARY:case P.TERTIARY:n(e.segs);break;case P.INTERP:t=_t(e.expr),p(e.filters,function(e){n(e.name.paths),n(e.args)})}return t}bt.start=function(e){ot=e,bt("san",e)},Tt.prototype._createGivenSlots=function(){var e=this;e.givenSlots.named={},e.givenANode&&e.scope&&p(e.givenANode.children,function(t){var n,i=!t.textExpr&&fe(t,"slot");if(i){!e.givenSlotInited&&e.givenNamedSlotBinds.push(i);var r=ne(i.expr,e.scope,e.owner);(n=e.givenSlots.named[r])||(n=e.givenSlots.named[r]=[])}else e.givenSlotInited||(n=e.givenSlots.noname)||(n=e.givenSlots.noname=[]);n&&n.push(t)}),e.givenSlotInited=!0},Tt.prototype.nodeType=ue.CMPT,Tt.prototype.nextTick=w,Tt.prototype._callHook=Tt.prototype._toPhase=function(e){this.lifeCycle[e]||(this.lifeCycle=de[e]||this.lifeCycle,"function"==typeof this[e]&&this[e](),this["_after"+e]=1,bt("comp-"+e,this))},Tt.prototype.on=function(e,t,n){"function"==typeof t&&(this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push({fn:t,declaration:n}))},Tt.prototype.un=function(e,t){for(var n=this.listeners[e],i=n&&n.length;i--;)t&&t!==n[i].fn||n.splice(i,1)},Tt.prototype.fire=function(e,t){var n=this;p(this.listeners[e],function(e){e.fn.call(n,t)})},Tt.prototype._calcComputed=function(e){var t=this.computedDeps[e];t||(t=this.computedDeps[e]={}),this.data.set(e,this.computed[e].call({data:{get:l(function(n){if(!n)throw new Error("[SAN ERROR] call get method in computed need argument");return t[n]||(t[n]=1,this.computed[n]&&this._calcComputed(n),this.watch(n,function(){this._calcComputed(e)})),this.data.get(n)},this)}}))},Tt.prototype.dispatch=function(e,t){for(var n=this.parentComponent;n;){var i=n.messages[e]||n.messages["*"];if("function"==typeof i){i.call(n,{target:this,value:t,name:e});break}n=n.parentComponent}},Tt.prototype.slot=function(e){var t=[],n=this;return function i(r){p(r,function(r){r.nodeType===ue.SLOT&&r.owner===n?(r.isNamed&&r.name===e||!r.isNamed&&!e)&&t.push(r):i(r.children)})}(this.children),t},Tt.prototype.ref=function(e){var t,n=this;function i(r){p(r,function(r){return function(r){if(r.nodeType===ue.TEXT)return;if(r.owner===n){var o;switch(r.nodeType){case ue.ELEM:(o=r.aNode.directives.ref)&&ne(o.value,r.scope,n)===e&&(t=r.el);break;case ue.CMPT:(o=r.givenANode.directives.ref)&&ne(o.value,r.scope,n)===e&&(t=r)}!t&&i(r.slotChildren)}!t&&i(r.children)}(r),!t})}return i(this.children),t},Tt.prototype._update=function(e){if(!this.lifeCycle.disposed){var t=this,n=!1;if(this._notifyNeedReload=function(){n=!0},e)if(Fe(this,this.givenANode.directives.bind,e,function(e,n){e in t.givenANode.hotspot.props||t.data.set(e,n,{target:{id:t.owner.id}})}),p(e,function(e){var i=e.expr;p(t.binds,function(n){var r,o=n.name,a=n.expr;!be(e,t,o)&&(r=ce(i,a,t.scope))&&(r>2&&(o=j([{type:P.STRING,value:o}].concat(i.paths.slice(a.paths.length))),a=i),r>=2&&e.type===le?t.data.splice(o,[e.index,e.deleteCount].concat(e.insertions),{target:{id:t.owner.id}}):t.data.set(o,ne(a,t.scope,t.owner),{target:{id:t.owner.id}}))}),p(t.givenNamedSlotBinds,function(e){return!(n=n||ce(i,e.expr,t.scope))})}),n)this._createGivenSlots(),this._repaintChildren();else for(var i=this.slotChildren.length;i--;){var r=this.slotChildren[i];r.lifeCycle.disposed?this.slotChildren.splice(i,1):r.isInserted&&r._update(e,1)}var o=this.dataChanges;o&&(this.dataChanges=null,p(this.aNode.hotspot.dynamicProps,function(e){p(o,function(n){if(ce(n.expr,e.expr,t.data)||e.hintExpr&&ce(n.expr,e.hintExpr,t.data))return rt(t,ne(e.expr,t.data,t),e),!1})}),$e(this,o),n&&(this._createGivenSlots(),this._repaintChildren()),this._toPhase("updated"),this.owner&&(this._updateBindxOwner(o),this.owner._update())),this._notifyNeedReload=null}},Tt.prototype._updateBindxOwner=function(e){var t=this;this.owner&&p(e,function(e){p(t.binds,function(n){var i=e.expr;if(n.x&&!be(e,t.owner)&&ce(i,Y(n.name),t.data)){var r=n.expr;i.paths.length>1&&(r=j(n.expr.paths.concat(i.paths.slice(1)))),t.scope.set(r,ne(i,t.data,t),{target:{id:t.id,prop:n.name}})}})})},Tt.prototype._repaintChildren=function(){Ye(this,0,1),this.children=[],this._contentReady=0,this.slotChildren=[],ct(this)},Tt.prototype._dataChanger=function(e){this.lifeCycle.created&&this._aftercreated?(this.dataChanges||(w(this._update,this),this.dataChanges=[]),this.dataChanges.push(e)):this.lifeCycle.inited&&this.owner&&this._updateBindxOwner([e])},Tt.prototype.watch=function(e,t){var n=Y(e);this.data.listen(l(function(e){ce(e.expr,n,this.data)&&t.call(this,ne(n,this.data,this),e)},this))},Tt.prototype.dispose=ut,Tt.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||(this.slotChildren=null,this.data.unlisten(),this.dataChanger=null,this.dataChanges=null,Nt(this,this.disposeNoDetach,this.disposeNoTransition),this.listeners=null,this.givenANode=null,this.givenSlots=null,this.givenNamedSlotBinds=null):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},Tt.prototype._attached=xt,Tt.prototype.attach=pt,Tt.prototype.detach=dt,Tt.prototype._create=st,Tt.prototype._onEl=ft;var At={version:"3.6.0",debug:!0,Component:Tt,defineComponent:Ct,compileComponent:Rt,parseTemplate:ee,parseExpr:Y,ExprType:P,LifeCycle:de,NodeType:ue,nextTick:w,Data:Ce,evalExpr:ne,inherits:c,DataTypes:S};e.exports=At,bt.start(At)}()}).call(this,n("./node_modules/timers-browserify/main.js").setImmediate)},"./node_modules/setimmediate/setImmediate.js":function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,c=1,p={},l=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){f(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){f(e.data)},i=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(r=h.documentElement,i=function(e){var t=h.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(f,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&f(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return p[c]=r,i(c),c++},d.clearImmediate=u}function u(e){delete p[e]}function f(e){if(l)setTimeout(f,0,e);else{var t=p[e];if(t){l=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{u(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/process/browser.js"))},"./node_modules/timers-browserify/main.js":function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n("./node_modules/setimmediate/setImmediate.js"),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./src/index.js":function(e,t,n){"use strict";n.r(t);var i=n("./node_modules/san/dist/san.dev.js");(new(n.n(i).a.defineComponent({template:'<div><input type="text" value="{{name}}"/>这是一个san组件</div>',initData:function(){return{name:"san"}}}))).attach(document.body)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,